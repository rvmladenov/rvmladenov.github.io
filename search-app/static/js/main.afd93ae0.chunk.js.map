{"version":3,"sources":["components/User/UserOptions/UserOptions.js","core/axios.js","core/api.js","components/Results/ExpansionPanel/ExpansionPanel.js","components/Results/Results.js","components/TemplateSearch/TemplateSearch.js","components/QuestionSearch/QuestionSearch.js","components/Controls/ControlsConstants.js","components/Controls/Controls.js","containers/Home/Home.js","store/actions/QuestionsActions.js","store/actions/ResultActions.js","store/actions/TemplateActions.js","components/Header/Header.js","App.js","serviceWorker.js","store/reducers/TemplatesStore.js","store/reducers/QuestionsStore.js","store/reducers/ResultsStore.js","store/middleware/ModifyDataBeforeStore.js","index.js"],"names":["SimpleMenu","React","useState","anchorEl","setAnchorEl","handleClose","Button","aria-controls","aria-haspopup","onClick","event","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","instance","axios","create","baseURL","api","getQuestions","get","getTemplates","useStyles","makeStyles","theme","root","width","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","color","palette","text","secondary","ExpansionPanelList","props","panel","classes","expanded","setExpanded","className","Grid","container","spacing","item","xs","ExpansionPanel","onChange","isExpanded","ExpansionPanelSummary","expandIcon","Typography","template","name","title","ExpansionPanelDetails","questions","toString","display","flexWrap","justifyContent","overflow","backgroundColor","background","paper","padding","textAlign","Results","results","Paper","resultTemplates","length","map","key","ThemeSearch","templates","Autocomplete","multiple","options","getOptionLabel","option","renderTags","value","getTagProps","index","console","log","missingTemplate","indexOf","Chip","label","newValue","onSelect","renderInput","params","TextField","variant","hasAll","QuestionSearch","unshift","filter","question","Object","freeze","TEMPLATE","QUESTION","flexGrow","Controls","type","answer","CONTROL_TYPE","onTemplatesSelect","onQuestionsSelect","sm","selectedTemplates","questionIds","selectedQuestions","Home","state","filteredTemplates","filteredQuestions","checkExistance","arr","target","every","v","includes","selectedQuestionIdsArr","setState","onSetSelectedQuestions","onAddResults","crossFilterData","then","questionsData","onAddQuestions","data","templatesData","onAddTemplates","catch","errorTemplates","errorQuestions","this","Component","connect","dispatch","questionActions","ResultActions","templateActions","onSetSelectedTemplates","Alert","elevation","marginTop","CustomizedSnackbars","severity","header","paddingTop","paddingBottom","appBar","zIndex","drawer","transition","transitions","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","hide","whiteSpace","drawerOpen","drawerClose","overflowX","breakpoints","up","toolbar","alignItems","mixins","content","button","textDecoration","MiniDrawer","useTheme","setOpen","CssBaseline","AppBar","position","clsx","Toolbar","IconButton","aria-label","edge","noWrap","direction","justify","Drawer","Divider","List","exact","to","ListItem","ListItemIcon","ListItemText","primary","path","component","from","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","initialState","reducer","action","modifyDataBeforeStore","store","next","prop","result","getState","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","TemplateStore","QuestionsStore","ResultStore","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.afd93ae0.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\n\r\nexport default function SimpleMenu() {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick} >\r\n        <PersonIcon />\r\n      </Button>\r\n      <Menu\r\n        id=\"simple-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleClose}\r\n      >\r\n        <MenuItem onClick={handleClose}>Profile</MenuItem>\r\n        <MenuItem onClick={handleClose}>My account</MenuItem>\r\n        <MenuItem onClick={handleClose}>Logout</MenuItem>\r\n      </Menu>\r\n    </div>\r\n  );\r\n}","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://search-app-391dc.firebaseio.com/'\r\n});\r\n\r\nexport default instance;","import axios from './axios';\r\n\r\nconst api = {\r\n    getQuestions: () => {\r\n        return axios.get('/questions.json')\r\n    },\r\n    getTemplates: () => {\r\n        return axios.get('/templates.json')\r\n    }\r\n}\r\n\r\nexport default api;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    heading: {\r\n      fontSize: theme.typography.pxToRem(15),\r\n      flexBasis: '33.33%',\r\n      flexShrink: 0,\r\n    },\r\n    secondaryHeading: {\r\n      fontSize: theme.typography.pxToRem(15),\r\n      color: theme.palette.text.secondary,\r\n    },\r\n  }));\r\n\r\nexport default function ExpansionPanelList(props) {\r\n    const classes = useStyles();\r\n  const [expanded, setExpanded] = React.useState(false);\r\n\r\n  const handleChange = (panel) => (event, isExpanded) => {\r\n    setExpanded(isExpanded ? panel : false);\r\n  };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container  spacing={3}>\r\n                <Grid item xs={12}>\r\n\r\n                <ExpansionPanel expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\r\n                    <ExpansionPanelSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    aria-controls=\"panel1bh-content\"\r\n                    id=\"panel1bh-header\"\r\n                    >\r\n                    <Typography className={classes.heading}>{props.template.name}</Typography>\r\n                    <Typography className={classes.secondaryHeading}>{props.template.title || '<no title provided>'}</Typography>\r\n                    </ExpansionPanelSummary>\r\n                    <ExpansionPanelDetails>\r\n                    <Typography>\r\n                      {props.template.questions.toString()}\r\n                    </Typography>\r\n                    </ExpansionPanelDetails>\r\n                </ExpansionPanel>\r\n\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ExpansionPanel from './ExpansionPanel/ExpansionPanel';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  }\r\n}));\r\n\r\nconst Results = (props) => {\r\n  const classes = useStyles();\r\n  \r\n  let results = (\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={12}>\r\n        <Paper className={classes.paper}><h3>Please select templates from the list to view their data :)</h3></Paper>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n\r\n  if (props.resultTemplates && props.resultTemplates.length > 0) {\r\n    results = props.resultTemplates.map(template => (\r\n      <div key={template.id} className={classes.root}>\r\n        <ExpansionPanel template={template} />\r\n      </div>\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {results}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Results;","import React from 'react';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport './TemplateSearch.scss';\r\n\r\nconst ThemeSearch = (props) => {\r\n  const templates = props.templates.templates || [];\r\n\r\n  return (\r\n    <Autocomplete\r\n        multiple\r\n        id=\"theme-search-autocomplete\"\r\n        options={templates}\r\n        getOptionLabel={(option) => option.name}\r\n        renderTags={(value, getTagProps) =>\r\n        value.map((option, index) => {\r\n          console.log('props', props);\r\n\r\n          const filteredTemplatesIds = props.templates.templates.map(template => template.id);\r\n\r\n            const isTemplateInTheList = filteredTemplatesIds.indexOf(option.id) >= 0;\r\n            const missingTemplate = !isTemplateInTheList ? 'not-included-template' : 'included-template';\r\n\r\n            return <span key={option.id} className={missingTemplate}>\r\n              <Chip label={option.name} {...getTagProps({ index })} />\r\n            </span>;\r\n        })\r\n        }\r\n        onChange={(event, newValue) => {\r\n            props.onSelect(newValue);\r\n        }}\r\n        renderInput={(params) => (\r\n          <TextField {...params} label=\"Themes List\" variant=\"outlined\" />\r\n        )}\r\n    />\r\n    );\r\n}\r\n\r\nexport default ThemeSearch;","import React from 'react';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nlet hasAll = false;\r\nconst selectAllId = -1;\r\n\r\nconst QuestionSearch = (props) => {\r\n  const questions = props.questions.questions || [];\r\n//   const selectedQuestions = props.questions.selectedQuestions\r\n  if (questions.length > 0 && !hasAll) {\r\n    questions.unshift({id: selectAllId, name: 'Select All'});\r\n    hasAll = true;\r\n  }\r\n\r\n  const onSelect = (newValue) => {\r\n    // If \"Select All\" was selected - insert all questions \r\n    if (newValue && newValue.length > 0) {\r\n        const hasSelectAll = newValue.filter(question => {\r\n            return question.id === selectAllId;\r\n        }).length > 0;\r\n\r\n        if (hasSelectAll) {\r\n            newValue = [...props.questions];\r\n        }\r\n    }\r\n \r\n      props.onSelect(newValue);\r\n  }\r\n\r\n  return (\r\n    <Autocomplete\r\n        multiple\r\n        id=\"questions-search-autocomplete\"\r\n        options={questions}\r\n        getOptionLabel={(option) => option.name}\r\n        renderTags={(value, getTagProps) =>\r\n        value.map((option, index) => (\r\n            <Chip label={option.name} {...getTagProps({ index })} />\r\n        ))\r\n        }\r\n        onChange={(event, newValue) => {\r\n            onSelect(newValue);\r\n        }}\r\n        renderInput={(params) => (\r\n            <TextField {...params} label=\"Questions List\" variant=\"outlined\" />\r\n        )}\r\n    />\r\n    );\r\n}\r\n\r\nexport default QuestionSearch;","export default Object.freeze({\r\n    TEMPLATE: 'TEMPLATE',\r\n    QUESTION: 'QUESTION'\r\n});","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport TemplateSearch from '../TemplateSearch/TemplateSearch';\r\nimport QuestionSearch from '../QuestionSearch/QuestionSearch';\r\nimport CONTROL_TYPE from './ControlsConstants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nexport default function Controls(props) {\r\n  const classes = useStyles();\r\n\r\n  const onSelect = (type, answer) => {\r\n    switch (type) {\r\n      case CONTROL_TYPE.TEMPLATE:\r\n        props.onTemplatesSelect(answer)\r\n        break;\r\n        \r\n        case CONTROL_TYPE.QUESTION:\r\n          props.onQuestionsSelect(answer);\r\n      break;\r\n    \r\n      default:\r\n        // TODO: Should throw an error\r\n        console.log(\"incorrect type of an answer\");\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n        <Grid container spacing={1}>\r\n            <Grid item xs={6} sm={4}>\r\n                <Paper className={classes.paper}>\r\n                    <TemplateSearch templates={ { \r\n                        templates: props.templates.templates,\r\n                        selectedTemplates: props.templates.selectedTemplates,\r\n                        questionIds: props.questions.questions.map(question => question.id)\r\n                      } } onSelect={(answer) => {\r\n                        onSelect(CONTROL_TYPE.TEMPLATE, answer)\r\n                      }} />\r\n                </Paper>\r\n            </Grid>\r\n\r\n            <Grid item xs={6} sm={4}>\r\n                <Paper className={classes.paper}>\r\n                    <QuestionSearch questions={ { questions: props.questions.questions, selectedQuestions: props.questions.selectedQuestions } } onSelect={(answer) => {\r\n                        onSelect(CONTROL_TYPE.QUESTION, answer)\r\n                      }} />\r\n                </Paper>\r\n            </Grid>\r\n\r\n        </Grid>\r\n    </div>\r\n  );\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport * as questionActions from '../../store/actions/QuestionsActions';\r\nimport * as templateActions from '../../store/actions/TemplateActions';\r\nimport * as ResultActions from '../../store/actions/ResultActions';\r\n\r\nimport api from '../../core/api';\r\nimport Results from '../../components/Results/Results';\r\nimport Controls from '../../components/Controls/Controls';\r\nimport './Home.scss';\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        filteredTemplates: [],\r\n        filteredQuestions: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        api.getQuestions()\r\n            .then(questionsData => {\r\n                this.props.onAddQuestions(questionsData.data);\r\n                this.setState({ filteredQuestions: questionsData.data });\r\n                // this.props.filteredQuestions = questionsData.data;\r\n                \r\n                api.getTemplates()\r\n                .then(templatesData => {\r\n                    this.props.onAddTemplates(templatesData.data);\r\n                    this.setState({ filteredTemplates: templatesData.data });\r\n                    // this.props.filteredTemplates = templatesData.data;\r\n                })\r\n                .catch(errorTemplates => {\r\n                    console.log(errorTemplates);\r\n                });\r\n            })\r\n            .catch(errorQuestions => {\r\n                console.log(errorQuestions);\r\n            });\r\n    }\r\n\r\n    // TODO: move that to a helper service. It is been used in the TemplateSearch.js as well\r\n    checkExistance = (arr, target) => {\r\n        return target.every(v => arr.includes(v))\r\n    };\r\n\r\n    onQuestionsSelect = questions => {\r\n        const selectedQuestionIdsArr = questions.map(question => question.id );\r\n        const filteredTemplates = this.props.templates.filter(template => {\r\n            return this.checkExistance(template.questions, selectedQuestionIdsArr);\r\n        });\r\n\r\n        this.setState({ filteredTemplates: filteredTemplates });\r\n\r\n        this.props.onSetSelectedQuestions(questions);\r\n    }\r\n\r\n    onTemplatesSelect = templates => {\r\n        // TODO:\r\n        console.log(templates);\r\n\r\n        this.props.onAddResults(templates);\r\n        // TODO: взимам всичките question ids от темплейта и ги слагам\r\n    }\r\n\r\n    crossFilterData = () => {\r\n        // TODO:\r\n    };\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"Home\">\r\n               <div className=\"Controls\">\r\n                    <Controls\r\n                        questions={ { questions: this.state.filteredQuestions, selectedQuestions: this.props.selectedQuestions } }\r\n                        templates={ { templates: this.state.filteredTemplates, selectedTemplates: this.props.selectedTemplates } }\r\n                        onQuestionsSelect={this.onQuestionsSelect}\r\n                        onTemplatesSelect={this.onTemplatesSelect}/>\r\n                </div> \r\n\r\n                <div className=\"Results\">\r\n                    <Results resultTemplates={this.props.results} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        templates: state.templates.templates,\r\n        questions: state.questions.questions,\r\n        selectedTemplates: state.templates.selectedTemplates,\r\n        selectedQuestions: state.questions.selectedQuestions,\r\n        results: state.results.templates\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAddQuestions: (questions) => {\r\n            dispatch(questionActions.addQuestions(questions))\r\n        },\r\n        onAddResults  : (templates) => dispatch(ResultActions.addResultTemplates(templates)),\r\n        onAddTemplates: (templates) => dispatch(templateActions.addTemplates(templates)),\r\n        onSetSelectedTemplates: (templates) => dispatch(templateActions.setSelectedTemplates(templates)),\r\n        onSetSelectedQuestions: (templates) => dispatch(questionActions.setSelectedQuestions(templates))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","export const ADD_QUESTIONS = 'ADD_QUESTIONS';\r\nexport const SET_SELECTED_QUESTIONS = 'ADD_SELECTED_QUESTIONS';\r\n\r\nexport const addQuestions = ( questions ) => {\r\n    return {\r\n        type: ADD_QUESTIONS,\r\n        value: questions\r\n    };\r\n};\r\n\r\nexport const setSelectedQuestions = ( questions ) => {\r\n    return {\r\n        type: SET_SELECTED_QUESTIONS,\r\n        value: questions\r\n    };\r\n};","export const ADD_RESULT_TEMPLATES = 'ADD_RESULT_TEMPLATE';\r\n\r\nexport const addResultTemplates = ( templates ) => {\r\n    return {\r\n        type: ADD_RESULT_TEMPLATES,\r\n        value: templates\r\n    };\r\n};","export const ADD_TEMPLATES = 'ADD_TEMPLATE';\r\nexport const ADD_RESULT_TEMPLATES = 'ADD_RESULT_TEMPLATES';\r\nexport const SET_SELECTED_TEMPLATES = 'SET_SELECTED_TEMPLATES';\r\nexport const REMOVE_TEMPLATE = 'REMOVE_TEMPLATE';\r\n\r\nexport const addTemplates = ( templates ) => {\r\n    return {\r\n        type: ADD_TEMPLATES,\r\n        value: templates\r\n    };\r\n};\r\n\r\nexport const setSelectedTemplates = ( templates ) => {\r\n    return {\r\n        type: SET_SELECTED_TEMPLATES,\r\n        value: templates\r\n    };\r\n};","import React from 'react';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function CustomizedSnackbars() {\r\n  const classes = useStyles();\r\n  // const [open, setOpen] = React.useState(false);\r\n\r\n  // const handleClick = () => {\r\n  //   setOpen(true);\r\n  // };\r\n\r\n  // const handleClose = (event, reason) => {\r\n  //   if (reason === 'clickaway') {\r\n  //     return;\r\n  //   }\r\n\r\n  //   setOpen(false);\r\n  // };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Alert severity=\"info\">You can filter templates based on selected questions</Alert>\r\n      <Alert severity=\"info\">The templates which does not include the list of selected questions but have been selected are colored in red</Alert>\r\n    </div>\r\n  );\r\n}","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport FingerprintIcon from '@material-ui/icons/Fingerprint';\nimport UserOptions from './components/User/UserOptions/UserOptions'\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Grid from '@material-ui/core/Grid';\n\nimport './App.scss';\n\nimport { Route, NavLink, Switch, Redirect } from 'react-router-dom';\nimport Home from './containers/Home/Home';\nimport Header from './components/Header/Header';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  header: {\n    paddingTop: '5rem',\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    paddingBottom: 0\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: 'nowrap',\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: 'hidden',\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9) + 1,\n    },\n  },\n  toolbar: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    paddingTop: 0\n  },\n  button: {\n    color: 'inherit',\n    textDecoration: 'none'\n  }\n}));\n\nexport default function MiniDrawer() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, {\n              [classes.hide]: open,\n            })}\n          >\n              <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Theme Search App\n          </Typography>\n\n          <Grid direction=\"row\" justify=\"flex-end\" alignItems=\"center\" container>\n            <Grid item>\n                <UserOptions />\n            </Grid>\n        </Grid>\n\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        className={clsx(classes.drawer, {\n          [classes.drawerOpen]: open,\n          [classes.drawerClose]: !open,\n        })}\n        classes={{\n          paper: clsx({\n            [classes.drawerOpen]: open,\n            [classes.drawerClose]: !open,\n          }),\n        }}\n      >\n        <div className={classes.toolbar}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n          </IconButton>\n        </div>\n\n        <Divider />\n        <List>\n          {['Home'].map((text, index) => (\n            <NavLink className={classes.button} key=\"homeLink\" exact to=\"/home\">\n              <ListItem button key={text}>\n                  <ListItemIcon><FingerprintIcon /></ListItemIcon>\n                  <ListItemText primary={text} />\n              </ListItem>\n            </NavLink>\n          ))}\n        </List>\n        <Divider />\n\n      </Drawer>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <header className={classes.header}>\n            <Header />\n          </header>\n        </Grid>\n        <Grid item xs={12}>\n          <header >\n            <main className={classes.content}>\n              <div>\n                <Switch>\n                    <Route path=\"/home\" component={Home} />\n                    <Redirect exact from=\"/\" to=\"/home\" />\n                </Switch>\n              </div>\n            </main>\n          </header>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/TemplateActions';\r\n\r\nconst initialState = {\r\n    templates: [],\r\n    selectedTemplates: [],\r\n};\r\n\r\nconst reducer = ( state = initialState, action ) => {\r\n    switch ( action.type ) {\r\n        case actionTypes.ADD_TEMPLATES:\r\n            return {\r\n                ...state,\r\n                templates: action.value\r\n            };\r\n        case actionTypes.SET_SELECTED_TEMPLATES:\r\n            return {\r\n                ...state,\r\n                selectedTemplates: action.value\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import * as actionTypes from '../actions/QuestionsActions';\r\n\r\nconst initialState = {\r\n    questions: [], // [{ [id: any]: { name: string } }]\r\n    selectedQuestions: [] // [{ [id: any]: { name: string } }]\r\n};\r\n\r\nconst reducer = ( state = initialState, action ) => {\r\n    switch ( action.type ) {\r\n        case actionTypes.ADD_QUESTIONS:\r\n            return {\r\n                ...state,\r\n                questions: action.value\r\n            };\r\n        case actionTypes.SET_SELECTED_QUESTIONS:\r\n            return {\r\n                ...state,\r\n                selectedQuestions: action.value\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import * as actionTypes from '../actions/ResultActions';\r\n\r\nconst initialState = {\r\n    templates: []\r\n};\r\n\r\nconst reducer = ( state = initialState, action ) => {\r\n    switch ( action.type ) {\r\n        case actionTypes.ADD_RESULT_TEMPLATES:\r\n            return {\r\n                ...state,\r\n                templates: action.value\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import { ADD_QUESTIONS } from '../actions/QuestionsActions';\r\nimport { ADD_TEMPLATES } from '../actions/TemplateActions';\r\n\r\nconst modifyDataBeforeStore = store => {\r\nreturn next => {\r\n    return action => {\r\n        // Modify data before sending it to the store\r\n        switch (action.type) {\r\n            case ADD_QUESTIONS:\r\n            case ADD_TEMPLATES:\r\n                const value = action.value.map(prop => {\r\n                    return prop;\r\n                })\r\n                action.value = [...value];\r\n            break;\r\n        \r\n            default:\r\n            break;\r\n        }\r\n\r\n        const result = next(action);\r\n\r\n        console.log('[Middleware] next state', store.getState()); // Gives you the updated in the store state\r\n        return result;\r\n    }\r\n}\r\n};\r\n\r\nexport default modifyDataBeforeStore;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { applyMiddleware, compose, combineReducers, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport TemplateStore from './store/reducers/TemplatesStore';\r\nimport QuestionsStore from './store/reducers/QuestionsStore';\r\nimport ResultStore from './store/reducers/ResultsStore';\r\nimport modifyDataBeforeStore from './store/middleware/ModifyDataBeforeStore';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst rootReducer = combineReducers({ \r\n  templates: TemplateStore,\r\n  questions: QuestionsStore,\r\n  results: ResultStore });\r\n\r\nconst store = createStore(rootReducer, composeEnhancers( applyMiddleware(modifyDataBeforeStore, thunk) ));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}